<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8"/>
  <!-- Balise viewport pour définir l'échelle initiale sur mobile -->
  <meta name="viewport" content="width=device-width, initial-scale=0.8, user-scalable=yes"/>
  <title>Wallet NITO</title>
  <link rel="icon" href="https://raw.githubusercontent.com/biigbang0001/wallet-nito/refs/heads/master/nito.png"/>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.1.6/purify.min.js"></script>
  <script src="https://unpkg.com/i18next@23.15.1/i18next.min.js"></script>
  <script src="https://unpkg.com/i18next-http-backend@2.6.1/i18nextHttpBackend.min.js"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&display=swap');
    
    :root {
      --neon-cyan: #00ffff;
      --neon-pink: #ff0080;
      --neon-purple: #8000ff;
      --neon-green: #00ff41;
      --dark-bg: #0a0a0a;
      --card-bg: rgba(20, 20, 30, 0.9);
      --accent-glow: 0 0 20px var(--neon-cyan);
    }

    * {
      box-sizing: border-box;
    }

    body {
      font-family: 'Orbitron', monospace;
      margin: 0;
      padding: 20px;
      background: 
        radial-gradient(ellipse at top, #1a0033 0%, #000 50%),
        linear-gradient(45deg, #000428 0%, #004e92 100%);
      background-attachment: fixed;
      color: #fff;
      min-height: 100vh;
      overflow-x: hidden;
      position: relative;
    }

    /* Animated background particles */
    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="20" cy="20" r="1" fill="%2300ffff" opacity="0.3"><animate attributeName="opacity" values="0.3;1;0.3" dur="2s" repeatCount="indefinite"/></circle><circle cx="80" cy="30" r="1" fill="%23ff0080" opacity="0.5"><animate attributeName="opacity" values="0.5;0.1;0.5" dur="3s" repeatCount="indefinite"/></circle><circle cx="60" cy="70" r="1" fill="%2300ff41" opacity="0.4"><animate attributeName="opacity" values="0.4;0.9;0.4" dur="1.5s" repeatCount="indefinite"/></circle></svg>') repeat;
      pointer-events: none;
      z-index: -1;
    }

    body.dark-mode {
      background: 
        radial-gradient(ellipse at top, #330011 0%, #000 50%),
        linear-gradient(45deg, #2d1b69 0%, #11998e 100%);
    }

    h1 {
      display: flex;
      justify-content: center;
      align-items: center;
      color: var(--neon-cyan);
      font-weight: 900;
      font-size: 2.5em;
      text-shadow: var(--accent-glow);
      margin: 20px 0 40px 0;
      animation: titlePulse 3s ease-in-out infinite alternate;
    }

    @keyframes titlePulse {
      0% { text-shadow: var(--accent-glow); }
      100% { text-shadow: 0 0 30px var(--neon-cyan), 0 0 40px var(--neon-cyan); }
    }

    h1 img {
      width: 50px;
      height: 50px;
      margin-right: 15px;
      filter: drop-shadow(0 0 15px var(--neon-cyan));
      animation: logoSpin 10s linear infinite;
    }

    @keyframes logoSpin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .section {
      background: var(--card-bg);
      backdrop-filter: blur(15px);
      padding: 25px;
      margin: 20px 0;
      border-radius: 15px;
      border: 1px solid rgba(0, 255, 255, 0.3);
      box-shadow: 
        0 8px 32px rgba(0, 0, 0, 0.3),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
      position: relative;
      overflow: hidden;
      transition: all 0.3s ease;
    }

    .section::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(0, 255, 255, 0.1), transparent);
      transition: left 0.5s ease;
    }

    .section:hover::before {
      left: 100%;
    }

    .section:hover {
      border-color: var(--neon-cyan);
      box-shadow: 
        0 0 30px rgba(0, 255, 255, 0.3),
        0 8px 32px rgba(0, 0, 0, 0.3),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
      transform: translateY(-2px);
    }

    .warning {
      background: linear-gradient(45deg, rgba(255, 0, 128, 0.2), rgba(255, 0, 0, 0.2));
      padding: 15px;
      border-radius: 10px;
      margin: 15px 0;
      border: 1px solid var(--neon-pink);
      box-shadow: 0 0 20px rgba(255, 0, 128, 0.3);
      animation: warningPulse 2s ease-in-out infinite alternate;
    }

    @keyframes warningPulse {
      0% { box-shadow: 0 0 20px rgba(255, 0, 128, 0.3); }
      100% { box-shadow: 0 0 30px rgba(255, 0, 128, 0.5); }
    }

    button {
      background: linear-gradient(45deg, rgba(0, 255, 255, 0.1), rgba(128, 0, 255, 0.1));
      color: var(--neon-cyan);
      border: 1px solid var(--neon-cyan);
      padding: 12px 24px;
      border-radius: 25px;
      cursor: pointer;
      margin: 8px;
      font-family: 'Orbitron', monospace;
      font-weight: 700;
      text-transform: uppercase;
      letter-spacing: 1px;
      position: relative;
      overflow: hidden;
      transition: all 0.3s ease;
      backdrop-filter: blur(10px);
    }

    button::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(0, 255, 255, 0.4), transparent);
      transition: left 0.5s ease;
    }

    button:hover::before {
      left: 100%;
    }

    button:hover {
      box-shadow: 0 0 25px var(--neon-cyan);
      text-shadow: 0 0 10px var(--neon-cyan);
      transform: translateY(-2px);
    }

    button:active {
      transform: translateY(0);
      box-shadow: 0 0 15px var(--neon-cyan);
    }

    button:disabled {
      background: rgba(100, 100, 100, 0.2);
      color: #666;
      border-color: #666;
      cursor: not-allowed;
      box-shadow: none;
    }

    input, select, textarea {
      width: 100%;
      padding: 15px;
      margin: 8px 0;
      border: 1px solid rgba(0, 255, 255, 0.5);
      border-radius: 10px;
      box-sizing: border-box;
      background: rgba(20, 20, 40, 0.8);
      color: #fff;
      font-family: 'Orbitron', monospace;
      backdrop-filter: blur(10px);
      transition: all 0.3s ease;
    }

    input:focus, select:focus, textarea:focus {
      outline: none;
      border-color: var(--neon-cyan);
      box-shadow: 0 0 20px rgba(0, 255, 255, 0.3);
      background: rgba(20, 20, 40, 0.9);
    }

    textarea {
      resize: vertical;
      min-height: 120px;
    }

    p, li {
      color: #e0e0e0;
      margin: 10px 0;
      line-height: 1.6;
    }

    ul {
      list-style: none;
      padding: 0;
    }

    li {
      background: rgba(30, 30, 50, 0.6);
      padding: 15px;
      margin: 10px 0;
      border-radius: 10px;
      border-left: 3px solid var(--neon-green);
      backdrop-filter: blur(10px);
      transition: all 0.3s ease;
    }

    li:hover {
      background: rgba(30, 30, 50, 0.8);
      transform: translateX(5px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .copy-btn, .reveal-btn {
      padding: 8px 16px;
      font-size: 12px;
      margin-left: 10px;
      background: linear-gradient(45deg, rgba(0, 255, 65, 0.2), rgba(0, 200, 50, 0.2));
      color: var(--neon-green);
      border-color: var(--neon-green);
    }

    .copy-btn:hover, .reveal-btn:hover {
      box-shadow: 0 0 20px var(--neon-green);
      text-shadow: 0 0 8px var(--neon-green);
    }

    .tx-hex {
      font-family: 'Courier New', monospace;
      font-size: 11px;
      word-break: break-all;
      background: rgba(10, 10, 30, 0.8);
      padding: 20px;
      border-radius: 10px;
      margin-top: 15px;
      border: 1px solid rgba(255, 0, 128, 0.3);
      backdrop-filter: blur(10px);
    }

    .consolidate-container {
      text-align: center;
      margin-top: 20px;
    }

    .consolidate-button {
      background: transparent;
      border: 1px solid var(--neon-purple);
      color: var(--neon-purple);
      padding: 10px 20px;
      border-radius: 25px;
      cursor: pointer;
      font-size: 14px;
      transition: all 0.3s ease;
    }

    .consolidate-button:hover {
      background: rgba(128, 0, 255, 0.1);
      box-shadow: 0 0 20px var(--neon-purple);
    }

    .theme-toggle {
      position: fixed;
      top: 20px;
      right: 20px;
      background: linear-gradient(45deg, var(--neon-cyan), var(--neon-purple));
      border: none;
      font-size: 24px;
      cursor: pointer;
      z-index: 1000;
      color: #000;
      padding: 12px;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 0 30px rgba(0, 255, 255, 0.5);
      transition: all 0.3s ease;
    }

    .theme-toggle:hover {
      transform: rotate(180deg) scale(1.1);
      box-shadow: 0 0 40px rgba(0, 255, 255, 0.8);
    }

    .blurred {
      filter: blur(5px);
      user-select: none;
      transition: filter 0.3s ease;
    }

    .blurred-input {
      filter: blur(5px);
    }

    .counter-box {
      text-align: center;
      margin: 20px 0;
      padding: 20px;
      background: linear-gradient(45deg, rgba(0, 255, 255, 0.1), rgba(128, 0, 255, 0.1));
      border-radius: 15px;
      border: 1px solid var(--neon-cyan);
      font-size: 18px;
      color: var(--neon-cyan);
      font-weight: 700;
      box-shadow: 0 0 25px rgba(0, 255, 255, 0.3);
      animation: counterGlow 3s ease-in-out infinite alternate;
    }

    @keyframes counterGlow {
      0% { box-shadow: 0 0 25px rgba(0, 255, 255, 0.3); }
      100% { box-shadow: 0 0 35px rgba(0, 255, 255, 0.5); }
    }

    /* Tabs styling futuriste */
    .tabs {
      display: flex;
      gap: 15px;
      margin: 20px 0 30px 0;
      flex-wrap: wrap;
      justify-content: center;
    }

    .tabs button {
      padding: 15px 25px;
      border: 1px solid rgba(0, 255, 255, 0.3);
      background: rgba(20, 20, 40, 0.6);
      color: var(--neon-cyan);
      border-radius: 15px;
      cursor: pointer;
      position: relative;
      overflow: hidden;
      transition: all 0.3s ease;
      backdrop-filter: blur(10px);
    }

    .tabs button.active {
      background: linear-gradient(45deg, rgba(0, 255, 255, 0.2), rgba(128, 0, 255, 0.2));
      border-color: var(--neon-cyan);
      box-shadow: 0 0 25px rgba(0, 255, 255, 0.4);
      text-shadow: 0 0 10px var(--neon-cyan);
    }

    .tab-pane {
      display: none;
      animation: fadeInUp 0.5s ease-out;
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* Styles pour la messagerie futuriste */
    .message-list {
      max-height: 400px;
      overflow-y: auto;
      margin-top: 15px;
      padding: 15px;
      border: 1px solid rgba(0, 255, 255, 0.3);
      border-radius: 15px;
      background: rgba(10, 10, 30, 0.8);
      backdrop-filter: blur(15px);
    }

    .message-list::-webkit-scrollbar {
      width: 8px;
    }

    .message-list::-webkit-scrollbar-track {
      background: rgba(20, 20, 40, 0.5);
      border-radius: 4px;
    }

    .message-list::-webkit-scrollbar-thumb {
      background: var(--neon-cyan);
      border-radius: 4px;
      box-shadow: 0 0 10px var(--neon-cyan);
    }

    .message-item {
      padding: 15px;
      margin: 10px 0;
      background: rgba(30, 30, 50, 0.8);
      border-radius: 10px;
      border-left: 4px solid var(--neon-green);
      word-break: break-word;
      backdrop-filter: blur(10px);
      transition: all 0.3s ease;
    }

    .message-item:hover {
      transform: translateX(5px);
      box-shadow: 0 5px 20px rgba(0, 255, 65, 0.3);
    }

    .message-item.error {
      border-left-color: var(--neon-pink);
      background: rgba(50, 20, 30, 0.8);
    }

    .message-item.read {
      border-left-color: var(--neon-cyan);
      background: rgba(20, 30, 50, 0.8);
    }

    .message-status {
      font-size: 11px;
      color: #aaa;
      margin-top: 8px;
      font-style: italic;
    }

    .char-counter {
      font-size: 11px;
      color: #aaa;
      margin-top: 8px;
      text-align: right;
    }

    .char-counter.over-limit {
      color: var(--neon-pink);
      font-weight: bold;
      text-shadow: 0 0 5px var(--neon-pink);
    }

    .send-form {
      margin-top: 20px;
      padding: 20px;
      border: 1px solid rgba(0, 255, 255, 0.3);
      border-radius: 15px;
      background: rgba(20, 20, 40, 0.8);
      display: none;
      backdrop-filter: blur(15px);
    }

    .unread-counter {
      display: none;
      background: linear-gradient(45deg, var(--neon-pink), #ff6b6b);
      color: white;
      padding: 10px 20px;
      border-radius: 25px;
      font-size: 14px;
      margin-bottom: 15px;
      text-align: center;
      box-shadow: 0 0 20px rgba(255, 0, 128, 0.5);
      animation: unreadPulse 2s ease-in-out infinite;
    }

    @keyframes unreadPulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.05); }
    }

    #loadingSpinner {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 60px;
      height: 60px;
      z-index: 1001;
    }

    #loadingSpinner::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border: 4px solid transparent;
      border-top: 4px solid var(--neon-cyan);
      border-right: 4px solid var(--neon-purple);
      border-radius: 50%;
      animation: spinGlow 1s linear infinite;
    }

    @keyframes spinGlow {
      0% { 
        transform: rotate(0deg);
        box-shadow: 0 0 20px var(--neon-cyan);
      }
      100% { 
        transform: rotate(360deg);
        box-shadow: 0 0 30px var(--neon-purple);
      }
    }

    /* Cacher les frais */
    #feeNito {
      display: none !important;
    }

    /* Masquer le label pour adresse à débiter */
    label[data-i18n="send_section.debit_label"] {
      display: none !important;
    }

    /* Responsive design amélioré */
    @media (max-width: 768px) {
      html, body {
        zoom: 0.8;
      }
      
      h1 {
        font-size: 2em;
      }
      
      .tabs {
        gap: 10px;
      }
      
      .tabs button {
        padding: 12px 18px;
        font-size: 12px;
      }
      
      .section {
        padding: 20px 15px;
      }
    }

    /* Footer futuriste */
    footer {
      text-align: center;
      margin-top: 50px;
      padding: 30px;
      border-top: 1px solid rgba(0, 255, 255, 0.3);
      font-size: 14px;
      color: #aaa;
      background: linear-gradient(45deg, rgba(0, 0, 0, 0.8), rgba(20, 20, 40, 0.8));
      backdrop-filter: blur(15px);
      border-radius: 15px;
    }

    footer a {
      color: var(--neon-cyan);
      text-decoration: none;
      transition: all 0.3s ease;
    }

    footer a:hover {
      text-shadow: 0 0 10px var(--neon-cyan);
      text-decoration: underline;
    }
  </style>
</head>
<body>
  <div id="loadingSpinner"></div>
  <button class="theme-toggle" id="themeToggle">🌙</button>

  <div class="section">
    <label for="languageSelect" data-i18n="language_label">Langue :</label>
    <select id="languageSelect">
      <option value="fr" data-i18n="languages.fr">Français</option>
      <option value="en" data-i18n="languages.en">English</option>
      <option value="de" data-i18n="languages.de">Deutsch</option>
      <option value="es" data-i18n="languages.es">Español</option>
      <option value="nl" data-i18n="languages.nl">Nederlands</option>
      <option value="ru" data-i18n="languages.ru">Русский</option>
      <option value="zh" data-i18n="languages.zh">中文</option>
    </select>
  </div>

  <h1><img src="https://raw.githubusercontent.com/biigbang0001/wallet-nito/refs/heads/master/nito.png" alt="">Wallet NITO</h1>

  <!-- Encart pour le compteur -->
  <div class="counter-box">
    <span data-i18n="counter.keys_generated">🔑 Clés Nito générées :</span> <span id="keyCounter">0</span>
  </div>

  <nav class="tabs" id="mainTabs">
    <button type="button" data-tab="tab-gen" class="active" data-i18n="generate_section.title">🎯 Génération de clé privée Nito</button>
    <button type="button" data-tab="tab-send" data-i18n="send_section.title">📤 Envoyer NITO</button>
    <button type="button" data-tab="tab-msg" data-i18n="encrypted_messaging.title">🔒 Messagerie cryptée</button>
  </nav>

  <div class="tab-pane" id="tab-gen" style="display:block">
    <div class="section">
      <h2 data-i18n="generate_section.title">🎯 Génération de clé privée Nito</h2>
      <button id="generateButton" data-i18n="generate_section.generate_button">🎲 Générer</button>
      <p><span data-i18n="generate_section.hd_master_key">🔐 xprv HD :</span> <span id="hdMasterKey" class="blurred"></span> <button class="copy-btn" id="copyHdKey" data-i18n="generate_section.copy">📋</button> <button class="reveal-btn" id="revealHdKey" data-i18n="generate_section.reveal">👁️ Révéler</button></p>
      <p><span data-i18n="generate_section.mnemonic_phrase">🎯 mnémonique HD :</span> <span id="mnemonicPhrase" class="blurred"></span> <button class="copy-btn" id="copyMnemonic" data-i18n="generate_section.copy">📋</button> <button class="reveal-btn" id="revealMnemonic" data-i18n="generate_section.reveal">👁️ Révéler</button></p>
      <p><span id="generatedAddress"></span></p>
      <p class="warning" data-i18n="generate_section.warning"><span id="inactivityTimer">[10:00]</span> ⚠️ Sauvegardez la clé privée immédiatement ! Elle sera effacée après 10 minutes d'inactivité ou après un rechargement de la page.</p>
    </div>

    <div class="section">
      <h2 data-i18n="import_section.title">📥 Importer un wallet</h2>
      <div>
        <textarea id="privateKeyWIF" placeholder="WIF/Hex/mnémonique HD/XPRV HD"
                  style="width: 100%; height: 80px; resize: vertical;"></textarea>
        <button class="reveal-btn" id="revealWifInput" data-i18n="generate_section.reveal">👁️ Révéler</button>
      </div>
      <button id="importWalletButton" data-i18n="import_section.import_button">📥 Importer</button>
      <p><span id="walletAddress"></span></p>
      <p><span data-i18n="import_section.balance">Solde :</span> <span id="walletBalance">0.00000000</span> NITO <button id="refreshBalanceButton" data-i18n="import_section.refresh_button">🔄</button></p>
    </div>
  </div>

  <div class="tab-pane" id="tab-send">
    <div class="section">
      <h2 data-i18n="send_section.title">📤 Envoyer NITO</h2>
      <input id="destinationAddress" placeholder="Adresse destinataire" data-i18n="[placeholder]send_section.destination_placeholder"/>
      <input id="amountNito" type="number" step="0.00000001" placeholder="Montant (NITO)" data-i18n="[placeholder]send_section.amount_placeholder"/>
      <button id="maxButton" type="button" class="copy-btn" style="margin-left: 5px; background: #4b5e40;" data-i18n="max_button.text">MAX</button>
      <input id="feeNito" type="number" step="0.00000001" placeholder="Frais (NITO)" value="0.0001" data-i18n="[placeholder]send_section.fee_placeholder"/>
      <label data-i18n="send_section.debit_label">Adresse à débiter :</label>
      <select id="debitAddressType">
        <option value="bech32" selected data-i18n="send_section.bech32_option">Bech32</option>
        <option value="p2tr">Bech32m (Taproot)</option>
      </select>
      <p>
        <span data-i18n="import_section.balance">Solde :</span>
        <span id="sendTabBalance">0.00000000</span> NITO
        <button id="refreshSendTabBalance" class="copy-btn" type="button" data-i18n="import_section.refresh_button">🔄</button>
      </p>

      <button id="prepareTxButton" data-i18n="send_section.prepare_button">🔍 Préparer</button>
      <button id="broadcastTxButton" data-i18n="send_section.broadcast_button">✅ Diffuser transaction</button>
      <button id="cancelTxButton" data-i18n="send_section.cancel_button">❌ Annuler</button>
      <div class="consolidate-container">
      </div>
      <div class="tx-hex" style="display:none" id="txHexContainer">
        <p data-i18n="send_section.signed_tx">Transaction signée (hex) :</p>
        <span id="signedTx"></span>
        <button class="copy-btn" id="copyTxHex" data-i18n="send_section.copy_tx">📋 Copier</button>
      </div>
    </div>
  </div>

  <div class="tab-pane" id="tab-msg">
    <div class="section">
      <h2 data-i18n="encrypted_messaging.title">🔒 Messagerie cryptée</h2>

      <!-- Publication de clé publique -->
      <button id="publishPubkeyButton" data-i18n="encrypted_messaging.publish_pubkey">🔑 Publier ma clé publique</button>
      <p style="font-size: 14px; color: #aaa; margin-top: 5px;">
        📋 <span data-i18n="encrypted_messaging.publish_info">Publiez votre clé publique une fois pour permettre aux autres de vous envoyer des messages cryptés.</span>
      </p>


      <hr style="margin: 20px 0; border: none; border-top: 1px solid #e0e0e0;">

    <!-- Écriture de message -->
    <h3 data-i18n="encrypted_messaging.write_title">✍️ Écrire un message</h3>
    <textarea id="messageInput" maxlength="50000" placeholder="Votre message (max 50000 caractères)" data-i18n="[placeholder]encrypted_messaging.message_placeholder"></textarea>
    <p class="char-counter" id="messageCharCounter">0/50000 </p>

    <div style="margin-top: 10px;">
      <button id="sendMessageButton" data-i18n="encrypted_messaging.send_button">📤 Envoyer</button>
      <button id="clearMessageButton" data-i18n="encrypted_messaging.clear_button">🗑️ Effacer</button>
    </div>
  </div>


    <!-- Formulaire d'envoi (masqué par défaut) -->
    <div id="sendMessageForm" class="send-form">
      <h4 data-i18n="messaging_recipient_title">📧 Destinataire du message</h4>
      <input id="recipientAddress" placeholder="Adresse bech32 du destinataire (nito1...)" data-i18n="[placeholder]encrypted_messaging.recipient_placeholder"/>
      <p id="sendMessageCost" class="char-counter" data-i18n="messaging_estimated_cost">Coût estimé: 0.0001 NITO (1 transaction)</p>
      <div style="margin-top: 10px;">
        <button id="confirmSendButton" data-i18n="encrypted_messaging.validate_button">✅ Confirmer l'envoi</button>
        <button id="cancelSendButton" data-i18n="encrypted_messaging.cancel_button">❌ Annuler</button>
      </div>
    </div>

    <hr style="margin: 20px 0; border: none; border-top: 1px solid #e0e0e0;">

    <!-- Lecture des messages -->
    <h3 data-i18n="encrypted_messaging.read_title">📬 Lire les messages</h3>
    <button id="refreshMessagesButton" data-i18n="encrypted_messaging.refresh_messages">🔄 Actualiser les messages</button>

    <!-- Compteur de messages non lus -->
    <div id="unreadMessages" class="unread-counter">
      <span id="unreadCount">0</span> 📧 <span data-i18n="encrypted_messaging.unread_messages">messages non lus</span>
    </div>

    <!-- Liste des messages -->
    <div id="messageList" class="message-list" style="display: none;">
      <div class="message-item">Aucun message reçu</div>
    </div>
  </div>

  <!-- Script pour réinitialiser le zoom sur mobile -->
  <script>
    // Détecter si l'appareil est un mobile
    const isMobile = /Mobi|Android|iPhone|iPad|iPod|Opera Mini|IEMobile|WPDesktop/.test(navigator.userAgent);

    if (isMobile) {
      let lastScale = 1;
      let isZooming = false;

      // Écouter les événements de toucher pour détecter un zoom
      document.addEventListener('touchstart', (e) => {
        if (e.touches.length === 2) {
          isZooming = true;
        }
      });

      document.addEventListener('touchend', () => {
        isZooming = false;
        // Réinitialiser le zoom après un court délai pour permettre au navigateur de mettre à jour
        setTimeout(() => {
          resetZoom();
        }, 300);
      });

      // Fonction pour réinitialiser le zoom
      function resetZoom() {
        // Forcer l'échelle à 0.8 via CSS zoom
        document.body.style.zoom = '0.8';
        // Forcer également via meta viewport
        const viewport = document.querySelector('meta[name="viewport"]');
        viewport.setAttribute('content', 'width=device-width, initial-scale=0.8, user-scalable=yes');
      }

      // Écouter les changements de taille de fenêtre (peut aider sur certains appareils)
      window.addEventListener('resize', () => {
        if (!isZooming) {
          resetZoom();
        }
      });

      // Vérification périodique pour s'assurer que le zoom est correct
      setInterval(() => {
        if (!isZooming) {
          const currentScale = window.visualViewport ? window.visualViewport.scale : 1;
          if (currentScale !== lastScale) {
            lastScale = currentScale;
            resetZoom();
          }
        }
      }, 500);
    }
  </script>

  <script type="module" src="./wallet.js"></script>

  <footer style="
    text-align: center;
    margin-top: 40px;
    padding: 20px;
    border-top: 1px solid #e0e0e0;
    font-size: 14px;
    color: #666;
    background: linear-gradient(to bottom, rgba(230, 240, 250, 0.5), rgba(179, 212, 252, 0.5));
  ">
    <div style="margin-bottom: 10px;">
      🔓 <span data-i18n="footer.open_source">Ce projet est open source</span> -
      <a href="https://github.com/biigbang0001/wallet-nito" target="_blank" style="color: #1e3a8a; text-decoration: none;">
        <span data-i18n="footer.view_code">Voir le code sur GitHub</span> 📖
      </a>
    </div>
    <div>
      🌐 <span data-i18n="footer.official_site">Site officiel NITO</span> -
      <a href="https://nito.network/" target="_blank" style="color: #1e3a8a; text-decoration: none;">
        nito.network 🚀
      </a>
    </div>
  </footer>

  <!-- Styles pour le mode sombre du footer -->
  <style>
    body.dark-mode footer {
      background: linear-gradient(to bottom, rgba(44, 62, 80, 0.5), rgba(26, 37, 47, 0.5)) !important;
      border-top: 1px solid #555 !important;
      color: #bbb !important;
    }

    body.dark-mode footer a {
      color: #64b5f6 !important;
    }

    footer a:hover {
      text-decoration: underline !important;
    }
  </style>

<script>
(function(){
  const tabs = document.querySelectorAll('#mainTabs button');
  function showTab(id){
    document.querySelectorAll('.tab-pane').forEach(p=>{
      p.style.display = (p.id === id) ? 'block' : 'none';
    });
    tabs.forEach(b=>b.classList.toggle('active', b.dataset.tab === id));
    // Scroll to top of content for better UX
    window.scrollTo({top: 0, behavior: 'smooth'});
  }
  tabs.forEach(btn => btn.addEventListener('click', () => {
    const target = btn.dataset.tab;
    const needsImport = (target === 'tab-send' || target === 'tab-msg');
    const isImported = !!(window.walletKeyPair);
    if (needsImport && !isImported) {
      if (window.i18next && i18next.t) {
        alert(i18next.t('errors.import_first'));
      } else {
        alert('Veuillez importer un wallet d\'abord.');
      }
      showTab('tab-gen');
      return;
    }
    showTab(target);
  }));
  // Expose helper to programmatically enable tabs after import if needed
  window.__nitoShowTab = showTab;
})();
</script>


<script>
(function(){
  async function updateSendTabBalance(){
    try {
      const sel = document.getElementById('debitAddressType');
      const out = document.getElementById('sendTabBalance');
      if (!sel || !out) return;
      const val = sel.value;
      const addr = (val === 'p2tr') ? (window.taprootAddress || '') : (window.bech32Address || '');
      if (!addr) { out.textContent = '0.00000000'; return; }
      const amt = await window.balance(addr);
      out.textContent = (amt || 0).toFixed(8);
    } catch(e){
      console.error('updateSendTabBalance error:', e);
    }
  }
  window.updateSendTabBalance = updateSendTabBalance;

  // Hook on select change
  document.addEventListener('change', (ev) => {
    if (ev.target && ev.target.id === 'debitAddressType') {
      updateSendTabBalance();
    }
  });
  // Hook on refresh click
  document.addEventListener('click', (ev) => {
    if (ev.target && ev.target.id === 'refreshSendTabBalance') {
      updateSendTabBalance();
    }
  });

  // Also update when Send tab is shown (integrate with tab nav if present)
  const sendTabButton = document.querySelector('#mainTabs button[data-tab="tab-send"]');
  if (sendTabButton) {
    sendTabButton.addEventListener('click', () => setTimeout(updateSendTabBalance, 0));
  }
  // Initial attempt (in case we land on send tab directly)
  setTimeout(updateSendTabBalance, 300);
})();
</script>

</body>
</html>
